from __future__ import annotations

import logging
import queue

from typing import Any

import voluptuous as vol
import random
from homeassistant import config_entries
from homeassistant.config_entries import ConfigEntry, ConfigFlow, OptionsFlow
from homeassistant.const import CONF_HOST, CONF_PASSWORD, CONF_USERNAME
from homeassistant.data_entry_flow import FlowResult
from homeassistant.helpers import aiohttp_client
from homeassistant.helpers.aiohttp_client import async_get_clientsession
from .pybambu import BambuLab

from .const import DOMAIN, LOGGER


class BambuLabConfigFlow(ConfigFlow, domain=DOMAIN):
    """Handle Bambu config flow"""

    VERSION = 1

    async def async_step_user(
            self, user_input: dict[str, Any] | None = None
    ) -> FlowResult:
        """Handle user step."""
        errors = {}


        if user_input is not None:
            LOGGER.debug("Config Flow Step User, connecting to device")
            try:
                await self._async_get_device(user_input[CONF_HOST])
                return self.async_create_entry(
                    title="X1", data={CONF_HOST: user_input[CONF_HOST]}
                )
            except BambuLab as err:
                LOGGER.error(err)
                errors["base"] = "cannot connect"

        else:
            user_input = {}

        return self.async_show_form(
            step_id="user",
            data_schema=vol.Schema({vol.Required(CONF_HOST): str}),
            errors=errors or {},
        )

    async def _async_get_device(self, host):
        bambu = BambuLab(host)
        device = await bambu.get_device()
        LOGGER.debug(f"async get device: {device}")
        return device



